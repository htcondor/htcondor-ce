#!/usr/bin/python

import os
import re
import sys
import time
import socket
import optparse
import textwrap
import tempfile
import traceback
from subprocess import Popen, PIPE, STDOUT

os.environ.setdefault("CONDOR_CONFIG", "/etc/condor-ce/condor_config")

import classad
import htcondor

g_debug = False

class CondorRunException(Exception):
    pass

class CondorUserException(Exception):
    pass

condorJobStatus = { \
  0: "Unexpanded",
  1: "Idle",
  2: "Running",
  3: "Removed",
  4: "Completed",
  5: "Held",
  6: "Transferring Output",
}

def print_formatted_error(error_msg):
    print "*"*80
    for line in textwrap.wrap(error_msg, 80):
        print line
    print "*"*80

def print_timestamped_exception(exception):
    print_formatted_error("%s %s" % (time.strftime('%F %T'), exception))

def verify_matching_condor_versions():
    lib_ver = htcondor.version()
    try:
        args = ('condor_version',)
        p = Popen(args, stdout=PIPE, stderr=STDOUT)
        (stdout, _) = p.communicate()
    except RuntimeError:
        raise CondorRunException('Could not find version information using condor_version. ' \
                                 'Ensure that condor_version is in your PATH')
    tool_ver = stdout.split('\n')[0]
    if lib_ver != tool_ver:
        raise RuntimeError('Found multiple, mismatched versions of HTCondor installed. ' \
                           'Please ensure that you only have one version of HTCondor installed.')

def configureAuth():
    try:
        auth_methods = re.split(r",?\s*", htcondor.param['SEC_CLIENT_AUTHENTICATION_METHODS'])
    except KeyError:
        auth_methods = []
    if 'GSI' not in auth_methods:
        auth_methods.append("GSI")

    auth_methods = ",".join(auth_methods)
    os.environ['_condor_SEC_CLIENT_AUTHENTICATION_METHODS'] = auth_methods
    htcondor.param['SEC_CLIENT_AUTHENTICATION_METHODS'] = auth_methods

def runPing(address, daemon='SCHEDD'):

    if not address.startswith("<"):
        address = "<%s>" % address
    if daemon == "SCHEDD":
        args = ["condor_ce_ping", "-addr", str(address), "-verbose", "-type", daemon, "-debug", "WRITE"]
    else:
        args = ["condor_ce_ping", "-addr", str(address), "-verbose", "-type", daemon, "-debug", "READ"]

    try:
        p = Popen(args, stdout=PIPE, stderr=STDOUT)
        (stdout, _) = p.communicate()
    except RuntimeError, e:
        raise CondorRunException('Failed to ping %s due to the following error:\n%s' % (address, e))

    if g_debug:
        print "*"*5, "condor_ping output", "*"*5
        print stdout,
        print "*"*20

    if p.returncode < 0:
        raise CondorRunException("Failed to ping %s; condor_ping terminated with signal %d." \
                                 % (address, -p.returncode))
    elif p.returncode > 0:
        if re.search('Failed to connect', stdout):
            raise CondorRunException("Failed to ping %s: Please contact the site's system adminstrator to ensure " \
                                     "that the CE you're trying to contact is functional." % address)
        else:
            message = "Failed to ping %s; authorization check exited with code %d." % (address, p.returncode)
            if not g_debug:
                message = message + " Re-run the command with '-d' for more verbose output." 
            raise CondorRunException(message)

    unauthorized_user = re.search(r'Remote Mapping:\s*(.*)\nAuthorized:\s*FALSE', stdout, re.MULTILINE)
    if unauthorized_user:
        raise CondorUserException("User %s does not have permissions for %s. Please contact the CE's system " \
                                  "administrator to ensure that your user is mapped properly in the site's " \
                                  "authentication system." %(unauthorized_user.group(1), address))

def parseOpts():

    usage = "usage: %prog [options] <CE hostname>"
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("-s", "--schedd-name",
        help="Name of the schedd to use.",
        dest="schedd_name")
    parser.add_option("-d", "--debug", help="Print debugging info.",
        dest="debug", default=False, action="store_true")
    parser.add_option("-a", "--attribute", help="Add attribute to job ad.",
                      dest="attribute", default=[], action='append')
    parser.add_option("-n", "--no-clean", help="Do not clean temporary "
        "files.", dest="clean", default=True, action="store_false")

    opts, args = parser.parse_args()
    global g_debug
    g_debug = opts.debug
    if g_debug and hasattr(htcondor.param, 'setdefault') and hasattr(htcondor, 'enable_debug'):
        htcondor.param.setdefault('TOOL_DEBUG', "D_FULLDEBUG")
        htcondor.enable_debug()

    return opts, args


def checkAuthz(job_info):
    print "Testing HTCondor-CE collector connectivity."
    addresses = socket.getaddrinfo(job_info['collector_fqdn'], job_info['collector_port'], 0, socket.SOCK_STREAM)
    hadSuccess = False
    for addrinfo in addresses:
        addr = "<%s:%d>" % addrinfo[4][:2]
        try:
            runPing("<%s:%d>" % addrinfo[4][:2], daemon="COLLECTOR")
            hadSuccess = True
            print "- Successful ping of collector on %s.\n" % addr
        except Exception, e:
            print "- Failed ping of collector on %s.\n" % addr
            raise e

    if not hadSuccess:
        raise CondorRunException("No collector check was successful! Please contact the site's system adminstrator to " \
                           "ensure that the CE you're trying to contact is functional.")
    coll = htcondor.Collector(job_info['collector_name'])

    try:
        ad = coll.locate(htcondor.DaemonTypes.Schedd, job_info['schedd_name'])
    except (ValueError, IOError):
        raise CondorRunException("Could not find CE's schedd. Please contact the site's system administrator to " \
                                 "ensure that CE you're trying to contact is functional.")

    job_info['schedd_ad'] = ad
    addr = ad['MyAddress']
    print "Testing HTCondor-CE schedd connectivity."
    try:
        runPing(addr)
        print "- Successful ping of schedd on %s.\n" % addr
    except Exception, e:
        print "- Failed ping of schedd on %s.\n" % addr
        raise e


def generate_run_script(job_info):

    job_info['command'] = 'env'
    job_info['arguments'] = ''

    if job_info['command'][0] != '/':
        for dir in os.environ.get("PATH", "").split(":"):
            test_path = os.path.join(dir, job_info['command'])
            if os.path.exists(test_path):
                job_info['command'] = test_path
                break

    if job_info['arguments']:
        job_info['arguments'] = '"%s"' % ' '.join(["'%s'" % i for i in \
            job_info['arguments']])
    else:
        job_info['arguments'] = ''

    pid = os.getpid()

    fd, job_info['stdout_file'] = tempfile.mkstemp(dir=".",
        prefix=".stdout_%d_" % pid)
    os.close(fd)

    fd, job_info['stderr_file'] = tempfile.mkstemp(dir=".",
        prefix=".stderr_%d_" % pid)
    os.close(fd)

    fd, job_info['log_file'] = tempfile.mkstemp(dir=".",
        prefix=".log_%d_" % pid)
    os.close(fd)

    fd, job_info['submit_file'] = tempfile.mkstemp(dir=".",
        prefix=".submit_%d_" % pid)


def addJobProxyInfo(job_ad):

    fd = os.popen("voms-proxy-info -file %s -subject" % job_ad['x509userproxy'])
    output = fd.read().strip()
    if fd.close():
        raise CondorUserException("Cannot parse proxy at %s." % job_ad['x509userproxy'])
    job_ad['x509userproxysubject'] = output

    fd = os.popen("voms-proxy-info -file %s -timeleft" % job_ad['x509userproxy'])
    output = fd.read().strip()
    if fd.close():
        raise CondorUserException("Cannot parse proxy at %s." % job_ad['x509userproxy'])
    output = int(output)
    if output <= 0:
        print "WARNING: available proxy appears to be expired"
    job_ad['x509UserProxyExpiration'] = int(time.time()) + int(output)

    fd = os.popen("voms-proxy-info -file %s -vo" % job_ad['x509userproxy'])
    output = fd.read().strip()
    if not fd.close():
        job_ad['x509UserProxyVOName'] = output

    fd = os.popen("voms-proxy-info -file %s -fqan" % job_ad['x509userproxy'])
    output_lines = fd.readlines()
    if not fd.close():
        output_lines = [i.strip() for i in output_lines]
        job_ad['x509UserProxyFirstFQAN'] = output_lines[0]
        job_ad['x509UserProxyFQAN'] = ",".join(output_lines)

    if g_debug:
        print "Job ad, pre-submit:", job_ad

def setClassadValueType(value):
    if value.lower() == 'true':
        return True
    elif value.lower() == 'false':
        return False
    elif re.match(r'\d+\.\d+$', value):
        return float(value)
    elif re.match(r'\d+$', value):
        return int(value)

    return value

def checkJobSubmit(job_info):

    job_ad = classad.ClassAd()
    job_ad["Cmd"] = job_info['command']
    job_ad["Args"] = job_info['arguments']
    job_ad['Out'] = job_info['stdout_file']
    job_ad['Err'] = job_info['stderr_file']
    job_ad['Log'] = job_info['log_file']
    job_ad['LeaveJobInQueue'] = classad.ExprTree("( StageOutFinish > 0 ) =!= true")
    for attr in job_info['attribute']:
        key, value = attr.split('=', 1)
        job_ad[key.strip()] = setClassadValueType(value.strip())
    proxy = os.environ.setdefault("X509_USER_PROXY", "/tmp/x509up_u%d" % os.geteuid())
    if not os.path.exists(proxy):
        raise CondorUserException("Could not find an X509 proxy in %s" % proxy)
    job_ad['x509userproxy'] = proxy
    addJobProxyInfo(job_ad)

    try:
        schedd = htcondor.Schedd(job_info['schedd_ad'])
    except RuntimeError, e:
        raise CondorRunException("Failed to contact schedd at %s due to the following error:\n%s" \
                                 % (job_info['schedd_ad']['Machine'], e))
    print "Submitting job to schedd %s" % job_info['schedd_ad']['MyAddress']
    ad_results = []
    try:
        cluster = schedd.submit(job_ad, 1, True, ad_results)
    except RuntimeError, e:
        raise CondorRunException("- Failed to submit job to %s due to the following error:\n%s" \
                                 % (job_info['schedd_ad']['Machine'], e))

    print "- Successful submission; cluster ID %d" % cluster

    print "Resulting job ad:", ad_results[0]

    print "Spooling cluster %d files to schedd %s" % (cluster, job_info['schedd_ad']['MyAddress'])
    try:
        schedd.spool(ad_results)
    except RuntimeError, e:
        raise CondorRunException("- Failed to spool files to %s due to the following error:\n%s" \
                                 % (job_info['schedd_ad']['Machine'], e))

    print "- Successful spooling"

    attempts = 600
    last_status = -1
    for attempt in range(attempts):
        if g_debug: print "Querying job status (%d/%d)" % (attempt+1, attempts)
        try:
            ad = schedd.query("ClusterID == %d" % cluster, ["JobStatus", "ClusterID", "ProcID"])
        except RuntimeError, e:
            raise CondorRunException("- Failed to query job status due to the following error:\n%s" %  e)
        if len(ad) != 1:
            raise CondorRunException("Could not find the job in cluster %d" % cluster)
        status = ad[0]['JobStatus']
        if g_debug:
            print "Job status:", condorJobStatus.get(status, status)
        elif last_status != status:
            if last_status == -1:
                print "Job status:", condorJobStatus.get(status, status)
            else:
                print "Job transitioned from", condorJobStatus.get(last_status, last_status), \
                    "to", condorJobStatus.get(status, status)
            last_status = status
        if status in [3, 4]: break
        time.sleep(1)

    if status == 5: # TODO - provide better diagnostics
        raise CondorRunException("Remote job, %d.0, was held" % cluster)
    if status == 4:
        try:
            schedd.retrieve("ClusterID == %d" % cluster)
        except RuntimeError, e:
            raise CondorRunException("Failed to retrieve output from %s due to the following error:\n%s" \
                                     % (job_info['schedd_ad']['Machine'], e))
        try:
            schedd.act(htcondor.JobAction.Remove, "ClusterID == %d" % cluster)
        except RuntimeError, e:
            raise CondorRunException("Failed to cleanup job on %s due to the following error:\n%s" \
                                     % (job_info['schedd_ad']['Machine'], e))
        output = open(job_info['stdout_file'], "r").read()
        if not output:
            raise CondorRunException("Job produced empty stdout")
        if g_debug:
            print "*"*5, "Job output", "*"*5
            print output,
            print "*"*20
        else:
            print "- Job was successful"

def cleanup(job_info):
    files = ['stdout_file', 'stderr_file', 'log_file', 'submit_file']

    for filename in files:
        os.remove(job_info[filename])

def main():
    opts, args = parseOpts()

    if len(args) < 1:
        raise RuntimeError("Usage: condor_ce_trace [options] <hostname>")

    verify_matching_condor_versions()

    job_info = {}
    job_info['attribute'] = opts.attribute
    collector_hostname = args[0].split(":")[0]
    collector_hostname = socket.getfqdn(collector_hostname)
    job_info['collector_fqdn'] = collector_hostname
    port_info = args[0].split(":")[1:]
    if port_info:
        job_info['collector_port'] = int(port_info[0])
    else:
        job_info['collector_port'] = 9619
    collector_hostname = "%s:%d" % (collector_hostname, job_info['collector_port'])
    job_info['collector_name'] = collector_hostname
    if opts.schedd_name:
        job_info['schedd_name'] = opts.schedd_name
    else:
        job_info['schedd_name'] = collector_hostname.split(":")[0]

    configureAuth()
    checkAuthz(job_info)
    try:
        generate_run_script(job_info)
        checkJobSubmit(job_info)
    finally:
        if opts.clean:
            cleanup(job_info)

if __name__ == '__main__':
    try:
        main()
    except (CondorRunException, CondorUserException, RuntimeError), e:
        print_timestamped_exception(e)
        sys.exit(1)
    except Exception, e:
        pid = os.getpid()
        try:
            fd, stack_file = tempfile.mkstemp(dir=".", prefix=".stack_%d_" % pid)
            f = os.fdopen(fd, 'w')
            f.write('%s\n' % time.strftime('%Y-%m-%d %H:%M:%S'))
            traceback.print_exc(file=f)
            f.close()
            print_formatted_error('Uncaught exception, please send %s to ' \
                                  'goc@opensciencegrid.org with a description of the issue.'
                                  % stack_file)
        except OSError, e:
            print_formatted_error("Unable to write stackfile due to the following error:\n%s" % e)
        sys.exit(1)
